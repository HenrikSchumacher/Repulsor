(* ::Package:: *)

(* ::Input:: *)
(*Needs["CCodeGenerator`"];*)
(*Get[FileNameJoin[{ParentDirectory[NotebookDirectory[]],"CodeHelpers.m"}]];*)
(*(*Get[FileNameJoin[{NotebookDirectory[],"Code_ComputeNearFarData.m"}]];*)*)
(*(*Get[FileNameJoin[{NotebookDirectory[],"Code_ComputeNearFarDataOps.m"}]];*)*)
(*(*Get[FileNameJoin[{NotebookDirectory[],"Code_DNear_to_Hulls.m"}]];*)*)
(*(*Get[FileNameJoin[{NotebookDirectory[],"Code_DFar_to_Hulls.m"}]];*)*)
(*Get[FileNameJoin[{NotebookDirectory[],"Code_DNearFar_to_Hulls.m"}]];*)
(**)
(*SimplicialMeshDetails[n_,m_]:=StringJoin[*)
(*"*)
(*    template<typename Real, typename Int, typename LInt>*)
(*    struct SimplicialMeshDetails<",ToString[n],",",ToString[m],",Real,Int,LInt>*)
(*    {*)
(*	public:*)
(**)
(*		using SparseMatrix_T = Sparse::MatrixCSR<Real,Int,LInt>;*)
(**)
(*	private:*)
(**)
(*		const Int thread_count = 1;*)
(**)
(*		static constexpr Int  SIZE = ",ToString[n+1],";*)
(*		static constexpr Real nth  = Inv<Real>( ",ToString[n+1]," );*)
(**)
(*	public:*)
(**)
(*		explicit SimplicialMeshDetails( const Int thread_count_ = 1 ) *)
(*		:*)
(*			thread_count(std::max(static_cast<Int>(1),thread_count_))*)
(*		{}*)
(*	*)
(*		Int ThreadCount() const*)
(*		{*)
(*			return thread_count;*)
(*		}*)
(*	*)
(*		std::string ClassName() const*)
(*        {*)
(*            return std::string(\"SimplicialMeshDetails<",ToString[n],",",ToString[m],",\")+TypeName<Real>+\",\"+TypeName<Int>+\">\";*)
(*        }*)
(*		",*)
(*(*ComputeNearFarData[n,m],*)*)
(*(*ComputeNearFarDataOps[n,m],*)*)
(*(*DNearToHulls[n,m],*)*)
(*(*DFarToHulls[n,m],*)*)
(*DNearFarToHulls[n,m],*)
(*"*)
(*	}; // SimplicialMeshDetails<",ToString[n],",",ToString[m],",Real,Int>*)
(*"*)
(*];*)
(**)
(*string=StringJoin[*)
(*"// Machine generated code. Don't edit this file!*)
(**)
(*#pragma once*)
(**)
(*namespace Repulsor*)
(*{*)
(*	template<int DOM_DIM, int AMB_DIM, typename Real, typename Int, typename LInt>*)
(*    struct SimplicialMeshDetails*)
(*    {*)
(*	public:*)
(**)
(*		using SparseMatrix_T = Sparse::MatrixCSR<Real,Int,LInt>;*)
(**)
(*		std::string ClassName() const*)
(*        {*)
(*            return std::string(\"SimplicialMeshDetails<\")+ToString(DOM_DIM)+\",\"+ToString(AMB_DIM)+\",\"+TypeName<Real>+\",\"+TypeName<Int>+\",\"+TypeName<LInt>+\">\";*)
(*        }*)
(**)
(*		",*)
(*(*ComputeNearFarData[-1,-1],*)*)
(*(*ComputeNearFarDataOps[-1,-1],*)*)
(*(*DNearToHulls[-1,-1],*)*)
(*(*DFarToHulls[-1,-1],*)*)
(*DNearFarToHulls[-1,-1],*)
(*"*)
(*	}; // SimplicialMeshDetails<DOM_DIM,AMB,Real,Int,LInt>*)
(**)
(*//----------------------------------------------------------------------------------------------*)
(**)
(*    ",*)
(*Riffle[*)
(*Flatten[*)
(*Table[SimplicialMeshDetails[n,m],*)
(*(*{n,2,$MaxDomainDimension},{m,n,$MaxAmbientDimension}*)*)
(*{n,0,2},{m,n+1,4}*)
(*]*)
(*],*)
(*"\n//----------------------------------------------------------------------------------------------\n"*)
(*],*)
(*"*)
(*} // namespace Repulsor"*)
(*];*)
(**)
(*Export[*)
(*FileNameJoin[{ParentDirectory[ParentDirectory[NotebookDirectory[]]],"src","SimplicialMesh","SimplicialMeshDetails.hpp"}],*)
(*string,*)
(*"Text"*)
(*]*)
